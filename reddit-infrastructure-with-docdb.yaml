AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to deploy a React frontend, Node.js backend, DocumentDB, and S3 bucket.

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type.

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway for Private Subnets
  MyNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  MyNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyNATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Route Table for Private Subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: Allow SSH and HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: Allow access to DocumentDB from EC2 instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 10.0.0.0/16

  # EC2 Instances
  FrontendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: my-key-pair
      ImageId: ami-04a81a99f5ec58529
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get install -y nginx git nodejs npm
          sudo npm install -g pm2
          git clone https://github.com/angel-christian25/redditclone-cloud.git
          cd redditclone-cloud/client
          npm install
          npm run build
          sudo tee /etc/nginx/sites-available/default <<EOF
          server {
              listen 80;
              root /home/ubuntu/redditclone-cloud/client/build;
              index index.html;
              
              location / {
                  try_files \$uri /index.html;
              }
          }
          EOF
          sudo systemctl restart nginx
          pm2 start npm --name "frontend" -- start
          pm2 save
          pm2 startup

  BackendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: my-key-pair
      ImageId: ami-04a81a99f5ec58529
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get install -y git nodejs npm nginx
          sudo npm install -g pm2
          git clone https://github.com/angel-christian25/redditclone-cloud.git
          cd redditclone-cloud/server
          npm install
          sudo tee /etc/nginx/sites-available/default <<EOF
          server {
              listen 80;
              
              location /api/ {
                  proxy_pass http://localhost:5000/;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF
          sudo systemctl restart nginx
          pm2 start npm --name "backend" -- start
          pm2 save
          pm2 startup

  # DocumentDB Cluster and Related Resources
  DocumentDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      BackupRetentionPeriod: 7
      DBClusterIdentifier: redditusers
      DBClusterParameterGroupName: default.docdb5.0
      DBSubnetGroupName: !Ref DocumentDBSubnetGroup
      MasterUsername: redditusers
      MasterUserPassword: redditusers
      Port: 27017
      PreferredBackupWindow: 03:00-03:30
      PreferredMaintenanceWindow: Mon:04:00-Mon:04:30
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: DocumentDBCluster

  DocumentDBInstance:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBInstanceClass: db.r6g.large
      DBClusterIdentifier: !Ref DocumentDBCluster

  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DocumentDB subnet group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # S3 Bucket
  RedditUsersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: redditusers2
      AccessControl: Private

Outputs:
  VPCId:
    Description: VPC Id
    Value: !Ref MyVPC
  PublicSubnet1Id:
    Description: Public Subnet 1 Id
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: Public Subnet 2 Id
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Description: Private Subnet 1 Id
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: Private Subnet 2 Id
    Value: !Ref PrivateSubnet2
  EC2FrontendInstanceId:
    Description: EC2 Frontend Instance Id
    Value: !Ref FrontendInstance
  EC2BackendInstanceId:
    Description: EC2 Backend Instance Id
    Value: !Ref BackendInstance
  DocumentDBClusterEndpoint:
    Description: DocumentDB Cluster Endpoint
    Value: !GetAtt DocumentDBCluster.Endpoint
  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref RedditUsersBucket
